test_meta:
  test_id: demo_screen_dash_ctx
  tester: demo_user
  description: |
    Demonstrate launching a Dash app in a GNU screen session, sharing in-memory ctx,
    and updating ctx in the background with multithreaded Python.

steps:
  - idx: 1
    name: create_screen_with_log
    type: shell
    cmd: scriptlets/shell/screen_script.sh
    args:
      - -r
      - test_screen
    stdout_to_ctx: "screen_create_log"
    # Logs will be in Logs/<timestamp>_create_screen_with_log.log

  - idx: 2
    name: check_and_attach_screen
    type: shell
    cmd: scriptlets/shell/screen_script.sh
    args:
      - -l
    stdout_to_ctx: "screen_list"
    # Optionally, parse ctx["screen_list"] in a Python step to check for "test_screen"

  - idx: 3
    name: launch_dash_in_screen
    type: shell
    cmd: scriptlets/shell/screen_script.sh
    args:
      - -s
      - test_screen
      - "python scriptlets/python/hello_dash.py --port 8050"
    # This sends the launch command to the screen session

  - idx: 4
    name: start_shared_ctx
    type: python
    module: scriptlets.python.ctx_init
    function: run
    params:
      keys: ["new_row"]
    # Initializes shared in-memory ctx

  - idx: 5
    name: update_ctx_background
    type: python
    module: scriptlets.python.ctx_row_updater
    function: run
    params:
      key: "new_row"
      n: 3
      interval_sec: 1
    # Continuously updates ctx["new_row"] with [timestamp, random1, random2, ..., randomn] in a background thread

  - idx: 6
    name: monitor_and_plot
    type: python
    module: scriptlets.python.hello_dash
    function: run
    params:
      port: 8050
      ctx_key: "new_row"
    # Modified hello_dash.py to plot ctx["new_row"] and print on ctx change