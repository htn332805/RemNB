version: 1
test_meta:
  test_id: "T-MEM-001"
  tester: "alice"
  description: "In-memory ctx demo"

steps:
  - idx: 1
    name: compute_metrics_mem
    type: python
    module: "scriptlets.python.compute_metrics_mem"
    function: "run"
    params:
      input_csv: "Data/normalized.csv"
    success:
      ctx_has_keys:
        - metrics
        - metrics_columns

  - idx: 2
    name: ai_analyze_mem
    type: python
    module: "scriptlets.python.ai_analyze_mem"
    function: "run"
    params:
      threshold: 85
    depends_on:
      - compute_metrics_mem
    success:
      ctx_has_keys:
        - ai_summary

  - idx: 3
    name: shell_bridge_demo
    type: shell
    cmd: bash
    args:
      - -lc
      - |
        python3 - <<'PYCODE'
        import sys, json
        payload = sys.stdin.read()
        if not payload.strip():
          print(0)
        else:
          try:
            data = json.loads(payload)
            print(len(data) if isinstance(data, list) else 1)
          except Exception:
            print(0)
        PYCODE
    stdin_from_ctx: "metrics_columns"
    stdout_to_ctx: "metric_col_count"
    depends_on:
      - compute_metrics_mem
    success:
      ctx_has_keys:
        - metric_col_count

  - idx: 99
    name: debug_print_ctx
    type: python
    module: "scriptlets.python.debug_print_ctx"
    function: "run"
    depends_on:
      - ai_analyze_mem
