# orchestrator/recipes/test_dash_with_ctxdump.yaml
version: 1
test_meta:
  test_id: "DASH-STREAM-CTXDUMP-001"
  tester: "auto"
  description: "Live Dash with periodic CTX dumps to console"

steps:
  - idx: 1
    name: ensure_dirs
    type: shell
    cmd: bash
    args:
      - -lc
      - |
        mkdir -p ./Data ./Logs ./Assets
    success:
      files_exist: ["Data"]

  - idx: 2
    name: init_stream_meta
    type: python
    module: "scriptlets.python.stream_feeder_mem"
    function: "init_meta"
    params:
      headers: ["AmbTemp","LiquidTemp","SystemTemp","ChassisFanDuty","Fan1RPM","Fan2RPM","PumpRPM"]
      interval_sec: 1.0
      min_val: 20.0
      max_val: 95.0
      buffer_max_rows: 20000
    success:
      ctx_has_keys: ["stream_config","stream_rows"]

  - idx: 3
    name: start_stream_feeder
    type: python
    module: "scriptlets.python.stream_feeder_mem"
    function: "start_background"
    params:
      override:
        interval_sec: 1.0
    depends_on: ["init_stream_meta"]

  # Dash app (also does its own 10s dumps if configured that way)
  # If you want the ctx_dump_every_10s to run concurrently, run it in a separate terminal/process,
  # or make Dash the last step and trigger ctx_dump outside the orchestrator.
  - idx: 4
    name: dash_live_mem
    type: python
    module: "scriptlets.python.dash_live_mem"
    function: "run"
    params:
      host: "0.0.0.0"
      port: 8053
      fallback_ports: [8051, 8052, 8060, 8080]
      default_y_cols: ["AmbTemp","LiquidTemp","SystemTemp"]
      title: "Thermal Stream (Shared Memory)"
      poll_ms: 1000
      draw_last_n: 5000
      ctx_dump_sec: 10
    depends_on: ["ctx_dump_every_10s"]
